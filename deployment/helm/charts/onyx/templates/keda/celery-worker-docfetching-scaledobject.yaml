{{- if and .Values.keda.enabled .Values.keda.celeryWorkers.enabled (and .Values.keda.celeryWorkers.docfetching .Values.keda.celeryWorkers.docfetching.enabled) }}
# Note: This KEDA ScaledObject will conflict with HPA if celeryworkers.docfetching.autoscaling.enabled is also true
# Only one autoscaler should be active per deployment
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: {{ include "onyx-stack.fullname" . }}-celery-worker-docfetching-scaledobject
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "onyx-stack.labels" . | nindent 4 }}
    app: celery-worker-docfetching
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "onyx-stack.fullname" . }}-celery-worker-docfetching
  pollingInterval: {{ .Values.keda.celeryWorkers.docfetching.pollingInterval | default 30 }}
  cooldownPeriod: {{ .Values.keda.celeryWorkers.docfetching.cooldownPeriod | default 300 }}
  minReplicaCount: {{ .Values.keda.celeryWorkers.docfetching.minReplicas | default 1 }}
  maxReplicaCount: {{ .Values.keda.celeryWorkers.docfetching.maxReplicas | default 10 }}
  triggers:
    {{- if .Values.keda.celeryWorkers.docfetching.triggers }}
    {{- range .Values.keda.celeryWorkers.docfetching.triggers }}
    - type: {{ .type }}
      metadata:
        {{- range $key, $value := .metadata }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    {{- end }}
    {{- else }}
    # Default Prometheus-based trigger for Redis queue depth if none specified
    # Scaling Logic: 
    # - When queue depth > 5: Scale up by factor of 2 (aggressive scaling)
    # - When queue depth <= 5: Scale down by factor of 0.5 (conservative scaling)
    # - Threshold of 1 ensures scaling triggers when metric value > 1
    - type: prometheus
      metadata:
        serverAddress: "http://prometheus-redis.monitoring.svc.cluster.local:9090"
        metricName: "redis_key_size_sum"
        metricType: "Value"
        threshold: "1"
        query: |
          # Simplified scaling logic for docfetching workers
          # Returns 2 when queue depth > 5, 0.5 when <= 5
          # This creates a clear scaling decision boundary
          (
            (sum(redis_key_size{key=~"connector_docfetching.*"}) > 5)
              * 2
          )
          +
          (
            (sum(redis_key_size{key=~"connector_docfetching.*"}) <= 5)
              * 0.5
          )
    {{- end }}
{{- end }}
